class Solution {//动态规划更新dp
public:
    string countAndSay(int n) {
        string dp[n+1];
        dp[0]='0';dp[1]='1';
        for(int k=2;k<=n;k++)
        {
            dp[k]="";
            int count=1;
            for(int i=0;i<dp[k-1].length();i++)
            {
                // cout<<i<<endl;
                if(dp[k-1][i+1]!='\0'&&dp[k-1][i]==dp[k-1][i+1]) 
                   {
                       
                       count++;
                    }
                else
                {
                    dp[k]+=std::to_string(count)+dp[k-1][i];
                  
                    count=1;
                   //cout<<dp[k]<<endl;
                }
            }
        }
        return dp[n];
    } 
};
方法2：递归dp数组改成countAndSay(n-1)
class Solution {
public:
    string countAndSay(int n) {
        
        if(n<=1)
        {
            return "1";
        }
        
            string str=countAndSay(n-1);
            string res="";
            int count=1;
            for(int i=0;i<str.length();i++)
            {
                // cout<<i<<endl;
                if(str[i+1]!='\0'&&str[i]==str[i+1]) 
                   {
                       
                       count++;
                    }
                else
                {
                    res+=std::to_string(count)+str[i];
                  
                    count=1;
                   //cout<<dp[k]<<endl;
                }
            }
        
        return res;
    } 
};
